import java.util.Scanner;

public class TicTacToe {
    public static void main(String[] args) {
        System.out.println("Welcome to TicTacToe!");
        System.out.println("To win you must connect three in a row (horizontally, vertically, or diagonally).");
        Scanner scanner = new Scanner(System.in);
        char[][] board = {
            {' ', '|', ' ', '|', ' '},
            {'-', '-', '-', '-', '-'},
            {' ', '|', ' ', '|', ' '},
            {'-', '-', '-', '-', '-'},
            {' ', '|', ' ', '|', ' '}
        };
        
        char player = 'O';
        boolean activeGame = true;
        
        boardDisplay(board);
        
        while (activeGame) {
            player = (player == 'X') ? 'O' : 'X';
            System.out.print(player + " please enter a number (1-9): ");
            int move = scanner.nextInt();
            
            if (validMove(board, move)) {
                playerMove(board, move, player);
                boardDisplay(board);
                
                if (winnerCheck(board)) {
                    System.out.println(player + " wins.");
                    activeGame = false;
                } else if (countTurns(board) == 9) { 
                    System.out.println("Draw.");
                    activeGame = false;
                }
            } else {
                System.out.println("That is an invalid move.");
                player = (player == 'X') ? 'O' : 'X'; 
            }
        }
        
        scanner.close();
    }
    
    public static void boardDisplay(char[][] board) {
        for (char[] row : board) {
            for (char col : row) {
                System.out.print(col);
            }
            System.out.println();
        }
    }
    
    public static void playerMove(char[][] board, int move, char player) {
        switch(move) {
            case 1: 
                board[0][0] = player; 
                break;
            case 2: 
                board[0][2] = player; 
                break;
            case 3: 
                board[0][4] = player; 
                break;
            case 4: 
                board[2][0] = player; 
                break;
            case 5: 
                board[2][2] = player; 
                break;
            case 6: 
                board[2][4] = player; 
                break;
            case 7: 
                board[4][0] = player; 
                break;
            case 8: 
                board[4][2] = player; 
                break;
            case 9: 
                board[4][4] = player; 
                break;
        }
    }
    
    public static boolean validMove(char[][] board, int move) {
        switch(move) {
            case 1: 
                return board[0][0] == ' ';
            case 2: 
                return board[0][2] == ' ';
            case 3: 
                return board[0][4] == ' ';
            case 4: 
                return board[2][0] == ' ';
            case 5: 
                return board[2][2] == ' ';
            case 6: 
                return board[2][4] == ' ';
            case 7: 
                return board[4][0] == ' ';
            case 8: 
                return board[4][2] == ' ';
            case 9: 
                return board[4][4] == ' ';
            default: 
                return false;
        }
    }
    
    public static boolean winnerCheck(char[][] board) {
        return (board[0][0] != ' ' && board[0][0] == board[0][2] && board[0][2] == board[0][4]) ||
               (board[2][0] != ' ' && board[2][0] == board[2][2] && board[2][2] == board[2][4]) ||
               (board[4][0] != ' ' && board[4][0] == board[4][2] && board[4][2] == board[4][4]) ||
               (board[0][0] != ' ' && board[0][0] == board[2][0] && board[2][0] == board[4][0]) ||
               (board[0][2] != ' ' && board[0][2] == board[2][2] && board[2][2] == board[4][2]) ||
               (board[0][4] != ' ' && board[0][4] == board[2][4] && board[2][4] == board[4][4]) ||
               (board[0][0] != ' ' && board[0][0] == board[2][2] && board[2][2] == board[4][4]) ||
               (board[0][4] != ' ' && board[0][4] == board[2][2] && board[2][2] == board[4][0]);
    }
    
    public static int countTurns(char[][] board) {
        int turnCount = 0;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] != ' ') {
                    turnCount++;
                }
            }
        }
        return turnCount;
    }
}
